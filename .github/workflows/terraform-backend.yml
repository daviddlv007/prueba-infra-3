name: Terraform Backend Setup

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'infra/terraform/modules/s3-backend/**'
      - '.github/workflows/terraform-backend.yml'

env:
  AWS_REGION: us-east-1
  BACKEND_BUCKET: prueba-infra-3-dev-7f3a2c
  PROJECT_NAME: prueba-infra-3
  LOCK_TABLE: terraform-state-lock

jobs:
  check-existing-resources:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      bucket_exists: ${{ steps.check-bucket.outputs.exists }}
      table_exists: ${{ steps.check-table.outputs.exists }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check if S3 bucket exists
      id: check-bucket
      run: |
        if aws s3api head-bucket --bucket "$BACKEND_BUCKET" 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Check if DynamoDB table exists
      id: check-table
      run: |
        if aws dynamodb describe-table --table-name "$LOCK_TABLE" 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

  deploy-backend:
    needs: check-existing-resources
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Determine import strategy
      id: import-strategy
      run: |
        if [ "${{ needs.check-existing-resources.outputs.bucket_exists }}" = "true" ] && [ "${{ needs.check-existing-resources.outputs.table_exists }}" = "true" ]; then
          echo "IMPORT_EXISTING=true" >> $GITHUB_ENV
          echo "Resources exist, will import them" >> $GITHUB_STEP_SUMMARY
        else
          echo "IMPORT_EXISTING=false" >> $GITHUB_ENV
          echo "Resources don't exist, will create them" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Terraform Init (Backend)
      run: |
        cd infra/terraform/modules/s3-backend
        terraform init

    - name: Terraform Validate (Backend)
      run: |
        cd infra/terraform/modules/s3-backend
        terraform validate

    - name: Terraform Plan (Backend)
      run: |
        cd infra/terraform/modules/s3-backend
        terraform plan \
          -var="bucket_name=${{ env.BACKEND_BUCKET }}" \
          -var="region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="lock_table_name=${{ env.LOCK_TABLE }}" \
          -var="import_existing=${{ env.IMPORT_EXISTING }}"

    - name: Terraform Apply (Backend)
      run: |
        cd infra/terraform/modules/s3-backend
        terraform apply -auto-approve \
          -var="bucket_name=${{ env.BACKEND_BUCKET }}" \
          -var="region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="lock_table_name=${{ env.LOCK_TABLE }}" \
          -var="import_existing=${{ env.IMPORT_EXISTING }}"

    - name: Import existing resources if needed
      if: env.IMPORT_EXISTING == 'true'
      run: |
        cd infra/terraform/modules/s3-backend
        
        # Importar recursos existentes al estado de Terraform
        terraform import aws_s3_bucket.existing[0] ${{ env.BACKEND_BUCKET }} || echo "Bucket already imported or doesn't exist"
        terraform import aws_dynamodb_table.existing[0] ${{ env.LOCK_TABLE }} || echo "Table already imported or doesn't exist"
        
        # Aplicar configuración para asegurar que los recursos tengan la configuración correcta
        terraform apply -auto-approve \
          -var="bucket_name=${{ env.BACKEND_BUCKET }}" \
          -var="region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="lock_table_name=${{ env.LOCK_TABLE }}" \
          -var="import_existing=true"