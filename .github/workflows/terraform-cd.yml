name: 'Terraform CD'

on:
  push:
    branches: [main]
    paths:
      - 'infra/terraform/environments/dev/**'
      - 'infra/terraform/modules/**'
  workflow_dispatch:

env:
  TF_VERSION: 1.13.1
  AWS_REGION: us-east-1

jobs:
  terraform-deploy:
    name: 'Terraform Apply to Production'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup environment variables
      run: |
        echo "PROJECT_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV
        echo "ENVIRONMENT=dev" >> $GITHUB_ENV

    - name: Setup Terraform Backend (if needed)
      run: |
        echo "Setting up backend resources if needed..."
        chmod +x ./infra/terraform/scripts/check-backend.sh
        chmod +x ./infra/terraform/scripts/setup-backend.sh
        
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        if ! ./infra/terraform/scripts/check-backend.sh; then
          echo "Creating backend resources..."
          ./infra/terraform/scripts/setup-backend.sh
        else
          echo "Backend resources already exist"
        fi
      working-directory: ./

    - name: Terraform Init
      run: |
        echo "Initializing Terraform with dynamic backend..."
        cd ./infra/terraform/environments/dev
        
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        PROJECT_NAME=$(basename $(git rev-parse --show-toplevel))
        
        terraform init -reconfigure -input=false \
          -backend-config="bucket=terraform-state-${ACCOUNT_ID}-dev" \
          -backend-config="key=${PROJECT_NAME}/dev/terraform.tfstate" \
          -backend-config="dynamodb_table=terraform-locks-${ACCOUNT_ID}" \
          -backend-config="region=us-east-1" \
          -backend-config="encrypt=true"
        
        terraform get -update
        echo "✅ Terraform initialization completed successfully!"
      working-directory: ./

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra/terraform/environments/dev

    - name: Terraform Plan
      run: terraform plan -input=false -out=tfplan  -lock=false
      working-directory: ./infra/terraform/environments/dev
      env:
        TF_CLI_ARGS: "-var-file=terraform.tfvars"

    - name: Check and Unlock Stale Terraform Locks
      run: |
        cd ./infra/terraform/environments/dev
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        BUCKET_NAME="terraform-state-${ACCOUNT_ID}-dev"
        TABLE_NAME="terraform-locks-${ACCOUNT_ID}"
        PROJECT_NAME=$(basename $(git rev-parse --show-toplevel))
        LOCK_ID=$(aws dynamodb get-item \
          --table-name $TABLE_NAME \
          --key "{\"LockID\": {\"S\": \"$BUCKET_NAME/$PROJECT_NAME/dev/terraform.tfstate\"}}" \
          --query "Item.LockID.S" \
          --output text 2>/dev/null || echo "")

        if [ -n "$LOCK_ID" ] && [ "$LOCK_ID" != "None" ]; then
          echo "⚠️ Found stale lock: $LOCK_ID, forcing unlock..."
          terraform force-unlock -force $LOCK_ID
        else
          echo "✅ No stale locks found"
        fi
      working-directory: ./

    - name: Terraform Apply
      run: |
        cd ./infra/terraform/environments/dev
        terraform apply -input=false -auto-approve -lock-timeout=10m tfplan
      working-directory: ./


    - name: Generate Infrastructure Documentation
      run: |
        terraform output -json > infrastructure.json
        ./infra/terraform/scripts/generate-docs.sh
      working-directory: ./infra/terraform/environments/dev

    - name: Update GitHub Environment Status
      run: |
        echo "Deployment completed successfully at $(date)" > deployment-status.md
        echo "Project: ${{ env.PROJECT_NAME }}" >> deployment-status.md
        echo "Environment: dev" >> deployment-status.md
      if: success()

    - name: Upload Deployment Report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-status.md