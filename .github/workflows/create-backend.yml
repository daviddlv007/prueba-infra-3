name: Crear Backend

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  create-backend:
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ steps.set-outputs.outputs.bucket }}
      table_name: ${{ steps.set-outputs.outputs.table }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Leer variables desde terraform.tfvars
        id: tfvars
        run: |
          set -euo pipefail
          PROJECT=$(grep 'project_name' infra/terraform/terraform.tfvars | awk -F '=' '{print $2}' | tr -d ' "')
          REGION=$(grep 'aws_region' infra/terraform/terraform.tfvars | awk -F '=' '{print $2}' | tr -d ' "')
          echo "PROJECT=$PROJECT" >> "$GITHUB_ENV"
          echo "REGION=$REGION" >> "$GITHUB_ENV"

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Crear bucket S3 y tabla DynamoDB
        id: set-outputs
        run: |
          set -euo pipefail

          BUCKET="${PROJECT}-backend"
          TABLE="terraform-state-lock"

          echo "Verificando bucket S3..."
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket ya existe: $BUCKET"
          else
            echo "Creando bucket S3: $BUCKET"
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET" --region "$REGION"
            else
              aws s3api create-bucket --bucket "$BUCKET" --region "$REGION" \
                --create-bucket-configuration LocationConstraint=$REGION
            fi
            aws s3api put-bucket-encryption --bucket "$BUCKET" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
            aws s3api put-bucket-versioning --bucket "$BUCKET" --versioning-configuration Status=Enabled
            aws s3api put-public-access-block --bucket "$BUCKET" \
              --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            echo "Bucket creado y endurecido"
          fi

          echo "Verificando tabla DynamoDB..."
          if aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1; then
            echo "Tabla DynamoDB ya existe: $TABLE"
          else
            echo "Creando tabla DynamoDB: $TABLE"
            aws dynamodb create-table \
              --table-name "$TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
              --region "$REGION"
            echo "Tabla DynamoDB creada"
          fi

          # Exponer outputs para el job
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "table=$TABLE" >> "$GITHUB_OUTPUT"

      - name: Mostrar valores antes de crear secrets
        run: |
          echo "===== Valores generados para revisiÃ³n manual ====="
          echo "BACKEND_BUCKET -> ${{ steps.set-outputs.outputs.bucket }}"
          echo "BACKEND_TABLE  -> ${{ steps.set-outputs.outputs.table }}"
          echo "=================================================="


      - name: Crear secrets automÃ¡ticos con PAT (si existe)
        env:
          GH_TOKEN: ${{ secrets.PA_TOKEN }}
        run: |
          set -euo pipefail
          if [ -n "$GH_TOKEN" ]; then
            echo "Creando secret BACKEND_BUCKET..."
            gh secret set BACKEND_BUCKET --body "${{ steps.set-outputs.outputs.bucket }}"
            echo "Creando secret BACKEND_TABLE..."
            gh secret set BACKEND_TABLE --body "${{ steps.set-outputs.outputs.table }}"
          else
            echo "No hay PAT definido, copia los outputs manualmente para crear los secrets:"
            echo "  BACKEND_BUCKET -> ${{ steps.set-outputs.outputs.bucket }}"
            echo "  BACKEND_TABLE  -> ${{ steps.set-outputs.outputs.table }}"
          fi
