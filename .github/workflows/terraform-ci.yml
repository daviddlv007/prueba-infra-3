name: 'Terraform CI'

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch: # EjecuciÃ³n manual

env:
  TF_VERSION: 1.13.1
  AWS_REGION: us-east-1

jobs:
  terraform-ci:
    name: 'Terraform Validate, Setup & Plan'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform Backend (if needed)
      id: setup-backend
      run: |
        if ./infra/terraform/scripts/check-backend.sh; then
          echo "Backend already exists"
          echo "backend_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Creating backend resources..."
          ./infra/terraform/scripts/setup-backend.sh
          echo "backend_exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./infra/terraform

    - name: Terraform Init
      run: |
        if [ "${{ steps.setup-backend.outputs.backend_exists }}" = "false" ]; then
          echo "Initializing new backend with dynamic configuration..."
          chmod +x ./infra/terraform/scripts/init-backend.sh
          ./infra/terraform/scripts/init-backend.sh
        else
          echo "Initializing existing backend..."
          terraform init -input=false
        fi
      working-directory: ./

    - name: Verify Modules Installation
      run: |
        echo "=== Verifying modules installation ==="
        cd ./infra/terraform/environments/dev
        terraform get
        terraform list
        echo "=== Modules verification complete ==="
      working-directory: ./

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra/terraform/environments/dev

    - name: Install and Run tfsec
      run: |
        # Descargar e instalar tfsec manualmente
        echo "Installing tfsec..."
        curl -sSL https://github.com/aquasecurity/tfsec/releases/download/v1.28.4/tfsec-linux-amd64 -o tfsec
        chmod +x tfsec
        ./tfsec ./infra/terraform --soft-fail
      working-directory: ./

    - name: Terraform Plan
      run: |
        cd ./infra/terraform/environments/dev
        timeout 600 terraform plan -no-color -out=tfplan
      env:
        TF_CLI_ARGS: "-var-file=terraform.tfvars"

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: infra/terraform/environments/dev/tfplan
        if-no-files-found: ignore

    - name: Generate Cost Estimation
      run: ./infra/terraform/scripts/cost-estimate.sh dev