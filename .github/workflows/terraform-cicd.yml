name: Terraform CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Nombre del proyecto'
        required: false
      aws_region:
        description: 'Región AWS (override)'
        required: false

permissions:
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_BUCKET: ${{ secrets.BACKEND_BUCKET }}
      TF_TABLE: ${{ secrets.BACKEND_TABLE }}
      TF_REGION: ${{ github.event.inputs.aws_region || secrets.AWS_REGION || 'us-east-1' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validar secrets requeridos
        run: |
          if [ -z "${TF_BUCKET:-}" ]; then
            echo "ERROR: secret BACKEND_BUCKET no definido. Ejecuta create-backend y guarda BACKEND_BUCKET en Secrets."
            exit 1
          fi
          if [ -z "${TF_TABLE:-}" ]; then
            echo "ERROR: secret BACKEND_TABLE no definido. Ejecuta create-backend y guarda BACKEND_TABLE en Secrets."
            exit 1
          fi
        shell: bash

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.TF_REGION }}

      - name: Validar backend remoto existe
        run: |
          if ! aws s3api head-bucket --bucket "$TF_BUCKET" 2>/dev/null; then
            echo "ERROR: Bucket S3 $TF_BUCKET no existe. Ejecuta create-backend primero."
            exit 1
          fi
          if ! aws dynamodb describe-table --table-name "$TF_TABLE" >/dev/null 2>&1; then
            echo "ERROR: Tabla DynamoDB $TF_TABLE no existe. Ejecuta create-backend primero."
            exit 1
          fi
        shell: bash

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init (configura backend en S3/DynamoDB)
        run: |
          terraform init \
            -backend-config="bucket=$TF_BUCKET" \
            -backend-config="region=$TF_REGION" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="dynamodb_table=$TF_TABLE" \
            -reconfigure
        working-directory: infra/terraform
        shell: bash

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra/terraform
        shell: bash

      - name: Terraform Plan
        run: terraform plan -out=tfplan -input=false
        working-directory: infra/terraform
        shell: bash

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -input=false -auto-approve tfplan
        working-directory: infra/terraform
        shell: bash

      - name: Obtener EC2_USER y EC2_HOST con debug
        id: ec2-vars
        working-directory: infra/terraform
        run: |
          #!/bin/bash
          set -euo pipefail

          echo "=== Directorio actual ==="
          pwd

          echo "=== Terraform init (reconfigurando backend) ==="
          terraform init \
            -backend-config="bucket=$TF_BUCKET" \
            -backend-config="region=$TF_REGION" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="dynamodb_table=$TF_TABLE" \
            -reconfigure

          echo "=== Forzando refresh del state ==="
          terraform refresh -input=false || true

          echo "=== Imprimiendo state remoto (state pull) ==="
          terraform state pull > state.json
          echo "=== Contenido state.json ==="
          cat state.json

          echo "=== Listando recursos en el state ==="
          terraform state list || true

          if ! terraform state list 2>/dev/null | grep -q '^aws_instance.this$'; then
            echo "No hay aws_instance.this en el state. No se generarán secrets."
            echo "ec2_user=" >> "$GITHUB_OUTPUT"
            echo "ec2_host=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "=== Intentando obtener aws_instance.this ==="
          terraform state show aws_instance.this || true

          # Obtener IP pública (output explícito)
          EC2_HOST=$(terraform output -raw instance_ip 2>/dev/null || true)
          echo "IP pública detectada: '$EC2_HOST'"

          # Obtener AMI desde el state
          AMI_ID=$(terraform state show -no-color aws_instance.this 2>/dev/null \
                  | sed -n 's/^ami *= *"\(.*\)"/\1/p' || true)
          echo "AMI_ID detectada: '$AMI_ID'"

          # Región
          AWS_REGION="${{ github.event.inputs.aws_region || secrets.AWS_REGION || 'us-east-1' }}"
          echo "Región AWS usada: $AWS_REGION"

          # Intentar obtener usuario desde tag 'User'
          EC2_USER=$(aws ec2 describe-images --image-ids "${AMI_ID:-}" --region "$AWS_REGION" \
            --query 'Images[0].Tags[?Key==`User`].Value' --output text 2>/dev/null || true)
          echo "Usuario desde tag 'User': '$EC2_USER'"

          # Si no existe tag 'User', inferir por nombre de la AMI
          if [ -z "${EC2_USER:-}" ] || [ "${EC2_USER:-}" = "None" ]; then
            ami_name=$(aws ec2 describe-images --image-ids "${AMI_ID:-}" --region "$AWS_REGION" \
                        --query 'Images[0].Name' --output text 2>/dev/null || true)
            ami_name_lc=$(echo "${ami_name:-}" | tr '[:upper:]' '[:lower:]' || true)
            case "$ami_name_lc" in
              *ubuntu*) EC2_USER="ubuntu" ;;
              *amazon*|*amazon-linux*|*amazonlinux*) EC2_USER="ec2-user" ;;
              *debian*) EC2_USER="admin" ;;
              *centos*) EC2_USER="centos" ;;
              *windows*) EC2_USER="Administrator" ;;
              *) EC2_USER="ec2-user" ;;
            esac
            echo "Usuario inferido por AMI: '$EC2_USER'"
          fi

          echo "=== Valores finales a exportar ==="
          echo "EC2_USER='$EC2_USER'"
          echo "EC2_HOST='$EC2_HOST'"

          echo "ec2_user=${EC2_USER:-ec2-user}" >> "$GITHUB_OUTPUT"
          echo "ec2_host=${EC2_HOST:-}" >> "$GITHUB_OUTPUT"
        shell: bash


      # ------------------------------
      # (SIMPLIFICADO) Crear secrets con PAT (gh)
      # ------------------------------
      - name: Crear/actualizar secrets EC2 usando PAT
        if: ${{ steps.ec2-vars.outputs.ec2_host }}   # ejecuta sólo si hay IP pública
        env:
          GH_TOKEN: ${{ secrets.PA_TOKEN }}
        run: |
          set -euo pipefail
          # Instalar gh si no existe (minimizar riesgo en distintos runners)
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi

          echo "Creando/actualizando secrets en GitHub..."
          gh secret set EC2_USER --body "${{ steps.ec2-vars.outputs.ec2_user }}"
          gh secret set EC2_HOST --body "${{ steps.ec2-vars.outputs.ec2_host }}"
          echo "Secrets EC2_USER y EC2_HOST creados/actualizados."
        shell: bash

      - name: No crear secrets (si no existe instancia)
        if: ${{ ! steps.ec2-vars.outputs.ec2_host }}
        run: |
          echo "No se detectó IP pública (instance_ip). No se crearon secrets EC2."
        shell: bash
