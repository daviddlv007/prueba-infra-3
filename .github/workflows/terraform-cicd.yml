name: Terraform CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Nombre del proyecto'
        required: false
      aws_region:
        description: 'Región AWS (override)'
        required: false

permissions:
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_BUCKET: ${{ secrets.BACKEND_BUCKET }}
      TF_TABLE: ${{ secrets.BACKEND_TABLE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Terraform region
        id: set-region
        run: |
          REGION="${{ github.event.inputs.aws_region }}"
          REGION="${REGION:-${{ secrets.AWS_REGION }}}"
          REGION="${REGION:-us-east-1}"
          echo "TF_REGION=$REGION" >> "$GITHUB_ENV"

      - name: Validar secrets requeridos
        run: |
          if [ -z "${TF_BUCKET:-}" ]; then
            echo "ERROR: secret BACKEND_BUCKET no definido. Ejecuta create-backend y guarda BACKEND_BUCKET en Secrets."
            exit 1
          fi
          if [ -z "${TF_TABLE:-}" ]; then
            echo "ERROR: secret BACKEND_TABLE no definido. Ejecuta create-backend y guarda BACKEND_TABLE en Secrets."
            exit 1
          fi
        shell: bash

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.TF_REGION }}

      - name: Validar backend remoto existe
        run: |
          if ! aws s3api head-bucket --bucket "$TF_BUCKET" 2>/dev/null; then
            echo "ERROR: Bucket S3 $TF_BUCKET no existe. Ejecuta create-backend primero."
            exit 1
          fi
          if ! aws dynamodb describe-table --table-name "$TF_TABLE" >/dev/null 2>&1; then
            echo "ERROR: Tabla DynamoDB $TF_TABLE no existe. Ejecuta create-backend primero."
            exit 1
          fi
        shell: bash

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init (configura backend en S3/DynamoDB)
        run: |
          terraform init \
            -backend-config="bucket=$TF_BUCKET" \
            -backend-config="region=$TF_REGION" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="dynamodb_table=$TF_TABLE" \
            -reconfigure
        working-directory: infra/terraform
        shell: bash

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra/terraform
        shell: bash

      - name: Terraform Plan
        run: terraform plan -out=tfplan -input=false
        working-directory: infra/terraform
        shell: bash

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -input=false -auto-approve tfplan
        working-directory: infra/terraform
        shell: bash

      - name: Debug y crear secrets EC2
        id: ec2-debug
        working-directory: infra/terraform
        env:
          GH_TOKEN: ${{ secrets.PA_TOKEN }}
        run: |
          #!/bin/bash
          set -euo pipefail

          echo "=== Directorio de trabajo ==="
          pwd

          echo "=== Terraform state list ==="
          terraform state list || true

          # Obtener IP desde output JSON
          EC2_HOST=$(terraform output -raw instance_ip 2>/dev/null || terraform output -json instance_ip 2>/dev/null | jq -r '.value // empty')
          echo "EC2_HOST='$EC2_HOST'"

          # Obtener AMI desde state
          AMI_ID=$(terraform state show -no-color aws_instance.this 2>/dev/null | sed -n 's/^[[:space:]]*ami *= *"\(.*\)"/\1/p')
          echo "AMI_ID='$AMI_ID'"

          # Determinar usuario por AMI
          EC2_USER=$(aws ec2 describe-images --image-ids "$AMI_ID" --region "${AWS_REGION:-us-east-1}" \
                        --query 'Images[0].Tags[?Key==`User`].Value' --output text 2>/dev/null || true)

          # Fallback simple basado en nombre de AMI si no hay tag
          if [ -z "$EC2_USER" ] || [ "$EC2_USER" = "None" ]; then
            ami_name=$(aws ec2 describe-images --image-ids "$AMI_ID" --region "${AWS_REGION:-us-east-1}" \
                          --query 'Images[0].Name' --output text 2>/dev/null || true)
            case "${ami_name,,}" in
              *ubuntu*) EC2_USER="ubuntu" ;;
              *amazon*|*amazon-linux*|*amazonlinux*) EC2_USER="ec2-user" ;;
              *debian*) EC2_USER="admin" ;;
              *centos*) EC2_USER="centos" ;;
              *windows*) EC2_USER="Administrator" ;;
              *) EC2_USER="ec2-user" ;;
            esac
          fi
          echo "EC2_USER='$EC2_USER'"

          # Exportar outputs para steps siguientes
          echo "ec2_user=$EC2_USER" >> "$GITHUB_OUTPUT"
          echo "ec2_host=$EC2_HOST" >> "$GITHUB_OUTPUT"

          # Crear/actualizar secrets si hay IP
          if [ -n "$EC2_HOST" ]; then
            echo "Creando/actualizando secrets en GitHub..."
            if ! command -v gh >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y gh
            fi
            gh secret set EC2_USER --body "$EC2_USER"
            gh secret set EC2_HOST --body "$EC2_HOST"
            echo "Secrets EC2_USER y EC2_HOST creados/actualizados."
          else
            echo "No se detectó IP pública. No se crearon secrets EC2."
          fi
