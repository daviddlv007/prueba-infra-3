name: Terraform CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Nombre del proyecto'
        required: false
      aws_region:
        description: 'Región AWS (override)'
        required: false

permissions:
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_BUCKET: ${{ secrets.BACKEND_BUCKET }}
      TF_TABLE: ${{ secrets.BACKEND_TABLE }}
      TF_REGION: ${{ github.event.inputs.aws_region || secrets.AWS_REGION || 'us-east-1' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validar secrets requeridos
        run: |
          if [ -z "${TF_BUCKET:-}" ]; then
            echo "ERROR: secret BACKEND_BUCKET no definido. Ejecuta create-backend y guarda BACKEND_BUCKET en Secrets."
            exit 1
          fi
          if [ -z "${TF_TABLE:-}" ]; then
            echo "ERROR: secret BACKEND_TABLE no definido. Ejecuta create-backend y guarda BACKEND_TABLE en Secrets."
            exit 1
          fi
        shell: bash

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.TF_REGION }}

      - name: Validar backend remoto existe
        run: |
          if ! aws s3api head-bucket --bucket "$TF_BUCKET" 2>/dev/null; then
            echo "ERROR: Bucket S3 $TF_BUCKET no existe. Ejecuta create-backend primero."
            exit 1
          fi
          if ! aws dynamodb describe-table --table-name "$TF_TABLE" >/dev/null 2>&1; then
            echo "ERROR: Tabla DynamoDB $TF_TABLE no existe. Ejecuta create-backend primero."
            exit 1
          fi
        shell: bash

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init (configura backend en S3/DynamoDB)
        run: |
          terraform init \
            -backend-config="bucket=$TF_BUCKET" \
            -backend-config="region=$TF_REGION" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="dynamodb_table=$TF_TABLE" \
            -reconfigure
        working-directory: infra/terraform
        shell: bash

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra/terraform
        shell: bash

      - name: Terraform Plan
        run: terraform plan -out=tfplan -input=false
        working-directory: infra/terraform
        shell: bash

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -input=false -auto-approve tfplan
        working-directory: infra/terraform
        shell: bash

      - name: Debug completo de EC2_USER y EC2_HOST
        id: ec2-debug
        working-directory: infra/terraform
        run: |
          #!/bin/bash
          set -euo pipefail
          # Directorio y debug
          pwd
          terraform state list || true
          # obtener IP (json preferred) con fallback
          RAW_IP=$(terraform output -json 2>/dev/null | jq -r '.instance_ip.value // empty' 2>/dev/null || true)
          if [ -z "$RAW_IP" ]; then
            RAW_IP=$(terraform output -raw instance_ip 2>/dev/null || echo "")
          fi
          EC2_HOST=$(echo "$RAW_IP" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1 || true)
          # obtener AMI (json preferred)
          AMI_ID=$(terraform state pull -json 2>/dev/null \
                  | jq -r '.resources[] 
                            | select(.type=="aws_instance" and .name=="this") 
                            | .instances[0].attributes.ami // empty' 2>/dev/null || true)
          # Fallback si no hay jq o state pull distinto
          if [ -z "$AMI_ID" ]; then
            AMI_ID=$(terraform state show -no-color aws_instance.this 2>/dev/null \
                    | sed -n 's/^[[:space:]]*ami *= *"\(.*\)"/\1/p' || true)
          fi
          # Region desde entorno (no usar ${{ }})
          AWS_REGION="${AWS_REGION:-us-east-1}"
          # Obtener user desde tag 'User' o por nombre de AMI
          EC2_USER=""
          if [ -n "$AMI_ID" ]; then
            EC2_USER=$(aws ec2 describe-images --image-ids "$AMI_ID" --region "$AWS_REGION" \
                      --query 'Images[0].Tags[?Key==`User`].Value' --output text 2>/dev/null || true)
          fi
          if [ -z "${EC2_USER:-}" ] || [ "$EC2_USER" = "None" ]; then
            ami_name=""
            if [ -n "$AMI_ID" ]; then
              ami_name=$(aws ec2 describe-images --image-ids "$AMI_ID" --region "$AWS_REGION" \
                        --query 'Images[0].Name' --output text 2>/dev/null || true)
            fi
            ami_name_lc=$(echo "${ami_name:-}" | tr '[:upper:]' '[:lower:]' || true)
            case "$ami_name_lc" in
              *ubuntu*) EC2_USER="ubuntu" ;;
              *amazon*|*amazon-linux*|*amazonlinux*) EC2_USER="ec2-user" ;;
              *debian*) EC2_USER="admin" ;;
              *centos*) EC2_USER="centos" ;;
              *windows*) EC2_USER="Administrator" ;;
              *) EC2_USER="ec2-user" ;;
            esac
          fi
          # Debug final
          echo "AMI_ID='$AMI_ID'"
          echo "EC2_HOST='$EC2_HOST'"
          echo "EC2_USER='$EC2_USER'"
          # Export to GH Actions
          echo "ec2_user=${EC2_USER}" >> "$GITHUB_OUTPUT"
          echo "ec2_host=${EC2_HOST}" >> "$GITHUB_OUTPUT"
        shell: bash

      # Crear/actualizar secrets EC2 usando PAT
      - name: Crear/actualizar secrets EC2 usando PAT
        env:
          GH_TOKEN: ${{ secrets.PA_TOKEN }}
        if: ${{ steps.ec2-debug.outputs.ec2_host != '' }}
        run: |
          set -euo pipefail
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi
          echo "Creando/actualizando secrets en GitHub..."
          gh secret set EC2_USER --body "$EC2_USER_VALUE"
          gh secret set EC2_HOST --body "$EC2_HOST_VALUE"
          echo "Secrets EC2_USER y EC2_HOST creados/actualizados."
        env:
          EC2_USER_VALUE: ${{ steps.ec2-debug.outputs.ec2_user }}
          EC2_HOST_VALUE: ${{ steps.ec2-debug.outputs.ec2_host }}
        shell: bash

      # No crear secrets (si no existe instancia)
      - name: No crear secrets (si no existe instancia)
        if: ${{ steps.ec2-debug.outputs.ec2_host == '' }}
        run: |
          echo "No se detectó IP pública (instance_ip). No se crearon secrets EC2."
        shell: bash