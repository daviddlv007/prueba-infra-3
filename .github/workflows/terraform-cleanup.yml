name: Terraform/Backend Cleanup Total

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Cargar variables de backend
        run: |
          BUCKET="${{ secrets.BACKEND_BUCKET }}"
          TABLE="${{ secrets.BACKEND_TABLE }}"
          REGION="${{ secrets.AWS_REGION || 'us-east-1' }}"
          echo "Bucket S3: $BUCKET"
          echo "Tabla DynamoDB: $TABLE"
        shell: bash
        id: set-backend

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init
        run: terraform init -input=false -backend-config="bucket=${{ secrets.BACKEND_BUCKET }}" -backend-config="region=${{ secrets.AWS_REGION || 'us-east-1' }}" -reconfigure
        working-directory: infra/terraform

      - name: Terraform Destroy Resources
        run: |
          set -euo pipefail
          WORKDIR="infra/terraform"

          if aws dynamodb describe-table --table-name "${{ secrets.BACKEND_TABLE }}" >/dev/null 2>&1; then
            echo "Tabla DynamoDB encontrada. Ejecutando terraform destroy con lock..."
            cd "$WORKDIR"
            terraform destroy -auto-approve -input=false -lock=true
          else
            echo "Tabla DynamoDB no encontrada. Ejecutando terraform destroy sin lock..."
            cd "$WORKDIR"
            terraform destroy -auto-approve -input=false -lock=false
          fi

      - name: Cleanup Backend (S3 + DynamoDB)
        run: |
          set -euo pipefail
          BUCKET="${{ secrets.BACKEND_BUCKET }}"
          TABLE="${{ secrets.BACKEND_TABLE }}"
          REGION="${{ secrets.AWS_REGION || 'us-east-1' }}"

          echo "Eliminando tabla DynamoDB (si existe)..."
          if aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1; then
            aws dynamodb delete-table --table-name "$TABLE" --region "$REGION"
            echo "Tabla DynamoDB eliminada."
          else
            echo "Tabla DynamoDB no existe."
          fi

          echo "Eliminando bucket S3 y contenido (si existe, manejando versioning)..."
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            aws s3api list-object-versions --bucket "$BUCKET" --output=json | \
            jq -r '.Versions[]?, .DeleteMarkers[]? | "\(.Key):\(.VersionId)"' | \
            while IFS=: read key version; do
              aws s3api delete-object --bucket "$BUCKET" --key "$key" --version-id "$version"
            done

            aws s3api delete-bucket --bucket "$BUCKET" --region "$REGION"
            echo "Bucket S3 eliminado."
          else
            echo "Bucket S3 no existe."
          fi

          echo "Cleanup total completado."
