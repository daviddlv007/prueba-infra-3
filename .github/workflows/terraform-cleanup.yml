name: Terraform Cleanup Total

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Nombre del proyecto'
        required: false
      aws_region:
        description: 'Región AWS'
        required: false
      bucket_name:
        description: 'Bucket S3 backend'
        required: false
      table_name:
        description: 'Tabla DynamoDB backend'
        required: false

permissions:
  contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ github.event.inputs.aws_region || 'us-east-1' }}

      - name: Validar backend remoto existe
        run: |
          BUCKET="${{ github.event.inputs.bucket_name || format('%s-%s-backend', github.event.inputs.project_name || 'prueba-infra-3', github.repository) }}"
          TABLE="${{ github.event.inputs.table_name || 'terraform-state-lock' }}"
          REGION="${{ github.event.inputs.aws_region || 'us-east-1' }}"

          echo "Verificando bucket S3..."
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "WARNING: Bucket S3 $BUCKET no existe, solo se destruirán recursos locales."
          fi

          echo "Verificando tabla DynamoDB..."
          if ! aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1; then
            echo "WARNING: Tabla DynamoDB $TABLE no existe, solo se destruirán recursos locales."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init
        run: terraform init -input=false -backend-config="bucket=$BUCKET" -backend-config="region=$REGION" -reconfigure
        working-directory: infra/terraform

      - name: Terraform Destroy Resources
        run: |
          set -euo pipefail
          WORKDIR="infra/terraform"

          if aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1; then
            echo "Tabla DynamoDB encontrada. Ejecutando terraform destroy con lock..."
            cd "$WORKDIR"
            terraform destroy -auto-approve -input=false -lock=true
          else
            echo "Tabla DynamoDB no encontrada. Ejecutando terraform destroy sin lock..."
            cd "$WORKDIR"
            terraform destroy -auto-approve -input=false -lock=false
          fi

      - name: Cleanup Backend (S3 + DynamoDB)
        run: |
          set -euo pipefail

          echo "Eliminando tabla DynamoDB (si existe)..."
          if aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1; then
            aws dynamodb delete-table --table-name "$TABLE" --region "$REGION"
            echo "Tabla DynamoDB eliminada."
          else
            echo "Tabla DynamoDB no existe."
          fi

          echo "Eliminando bucket S3 y contenido (si existe, manejando versioning)..."
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            aws s3api list-object-versions --bucket "$BUCKET" --output=json | \
            jq -r '.Versions[]?, .DeleteMarkers[]? | "\(.Key):\(.VersionId)"' | \
            while IFS=: read key version; do
              aws s3api delete-object --bucket "$BUCKET" --key "$key" --version-id "$version"
            done

            aws s3api delete-bucket --bucket "$BUCKET" --region "$REGION"
            echo "Bucket S3 eliminado."
          else
            echo "Bucket S3 no existe."
          fi

          echo "Cleanup total completado."
