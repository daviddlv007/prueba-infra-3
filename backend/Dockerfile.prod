# -------------------------
# Stage: builder (compila wheels)
# -------------------------
FROM python:3.12-slim AS builder
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
WORKDIR /app

# Dependencias del sistema necesarias solo para compilar ruedas (wheels)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential gcc libpq-dev curl && rm -rf /var/lib/apt/lists/*

# Copiar requirements-prod de producción
COPY requirements-base.txt requirements-prod.txt /app/

# Construir wheels reproducibles
RUN pip install --upgrade pip setuptools wheel \
 && pip wheel --wheel-dir=/wheels -r /app/requirements-prod.txt

# -------------------------
# Stage: final (runtime)
# -------------------------
FROM python:3.12-slim AS final
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
WORKDIR /app

# Dependencias del sistema ligeras para runtime
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 ca-certificates curl && rm -rf /var/lib/apt/lists/*

# Instalar paquetes Python desde los wheels generados (sin internet)
COPY --from=builder /wheels /wheels
COPY requirements-base.txt requirements-prod.txt /app/
RUN pip install --upgrade pip \
 && pip install --no-index --find-links=/wheels -r /app/requirements-prod.txt \
 && rm -rf /wheels /root/.cache/pip

# Crear usuario no-root con UID/GID 1000 para alinear con docker-compose
RUN groupadd -g 1000 app \
 && useradd -u 1000 -g 1000 -r -m app \
 && mkdir -p /vol/static /vol/media /run/gunicorn \
 && chown -R app:app /vol /run/gunicorn

# Copiar código y entrypoint como root para setear permisos
COPY --chown=app:app . /app
COPY --chown=app:app entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Cambiar a usuario no-root
USER app

# Variables de entorno por defecto (ajustables en runtime)
ENV DJANGO_SETTINGS_MODULE=mi_proyecto.settings.production
ENV PYTHONPATH=/app

# Puerto interno que escucha Gunicorn
EXPOSE 8000

# Entrypoint para migraciones y collectstatic
ENTRYPOINT ["/app/entrypoint.sh"]
